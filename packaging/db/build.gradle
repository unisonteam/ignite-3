/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
    alias(libs.plugins.nebula)
}

configurations {
    dbArtifacts
}

import org.apache.tools.ant.filters.ReplaceTokens

dependencies {
    dbArtifacts(project(':ignite-runner'))
}

distributions {
    db {
        startScripts.enabled = false
        distributionBaseName = 'ignite3-db'
        contents {
            // create empty dirs that are required to start Ignite
            into('') {
                File.createTempDir().with {
                    ["log", "etc", "work"].each { new File(absolutePath, it).mkdirs() }
                    from(absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into('') {
                from("$rootDir/LICENSE")
                from("$rootDir/NOTICE")
                from("$rootDir/assembly/README.md")
            }
            into('etc') {
                from("$rootDir/packaging/db/scripts/bootstrap-config")
                from("$rootDir/packaging/db/config/ignite-config.conf")
                from("$rootDir/packaging/db/config/ignite.java.util.logging.properties")
            }
            into('bin') {
                fileMode 0755
                from("$rootDir/packaging/db/scripts/ignite3-db.sh")
            }
            into('lib') {
                from(configurations.dbArtifacts)
            }
        }
    }
}


//// create an uber zip with all distributions
//task allDistZip(type: Zip) {
//    archiveBaseName = "ignite3"
//    def allZipFiles = cliDistZip.outputs.files + dbDistZip.outputs.files
//    allZipFiles.each {
//        from(zipTree(it))
//    }
//}
//
//allDistZip.dependsOn cliDistZip, dbDistZip

def tokens = [
        PRODUCT_NAME        : 'ignite3db',
        PRODUCT_DISPLAY_NAME: 'Apache Ignite',
        USERNAME            : 'ignite3',
        GROUPNAME           : 'ignite3',
        INSTALL_DIR         : '/usr/share/ignite3db',
        CONF_DIR            : '/etc/ignite3db',
        LOG_DIR             : '/var/log/ignite3db',
        PID_DIR             : '/var/run/ignite3db',
        VARS_FILE_NAME      : 'vars.env',
        MIN_PRODUCT_VERSION : project.version.toString(),
        PRODUCT_VERSION     : project.version.toString(),
        IGNITE_CONF_FILE    : 'ignite-config.conf',
        IGNITE_WORK_DIR     : '/usr/share/ignite3db/work'
]

task replaceScriptVars(type: Copy) {
    from("${rootDir}/packaging/db/linux")
    filter(ReplaceTokens, tokens: tokens)
    into("${buildDir}/packaging/db/linux")
}

buildRpm {
    dependsOn replaceScriptVars
    configurationFile = "/etc/ignite3/vars.env"

    installUtils file("${buildDir}/packaging/db/linux/service/vars.env")
    installUtils file("${buildDir}/packaging/db/linux/common.sh")
    preInstall file("${buildDir}/packaging/db/linux/preInstall.sh")
    postInstall file("${buildDir}/packaging/db/linux/postInstall.sh")
    preUninstall file("${buildDir}/packaging/db/linux/rpm/preUninstall.sh")
    postUninstall file("${buildDir}/packaging/db/linux/rpm/postUninstall.sh")
}

buildDeb {
    dependsOn replaceScriptVars
    configurationFile = "/etc/ignite3/vars.env"

    installUtils file("${buildDir}/packaging/db/linux/service/vars.env")
    installUtils file("${buildDir}/packaging/db/linux/common.sh")
    preInstall file("${buildDir}/packaging/db/linux/preInstall.sh")
    postInstall file("${buildDir}/packaging/db/linux/postInstall.sh")
    preUninstall file("${buildDir}/packaging/db/linux/deb/preUninstall.sh")
    postUninstall file("${buildDir}/packaging/db/linux/deb/postUninstall.sh")
}

ospackage {
    license "ASL 2.0"
    packageName 'ignite3db'
    packageGroup "System Environment/Daemons"
    url "https://ignite.apache.org"
    user "ignite3"
    packageDescription "This package will install Apache Ignite"
    os LINUX

    into(tokens.INSTALL_DIR) {
        into("") {
            from "${rootDir}/packaging/db/linux/service/ignite3db@.service"
            from "${rootDir}/packaging/db/linux/service/ignite3db.conf"
            from("${rootDir}/packaging/db/linux/start.sh") {
                fileMode 0755
            }
            filter(ReplaceTokens, tokens: tokens)
        }

        into("lib") {
            from configurations.dbArtifacts
        }

        into("etc") {
            fileType CONFIG
            from "${rootDir}/packaging/db/linux/service/vars.env"
            from "${rootDir}/packaging/db/config/ignite.java.util.logging.properties"
            from "${rootDir}/packaging/db/config/ignite-config.conf"
        }

        into("etc") {
            from sourceSets.main.resources
        }
    }
    link "/etc/ignite3db", "${tokens.INSTALL_DIR}/etc/"
    link "/opt/ignite3db", "${tokens.INSTALL_DIR}"
}
